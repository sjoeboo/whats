#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'pp'
require 'json'
require 'yaml'
require 'net/http'
require 'uri'
require 'resolv'
require 'ipaddr'
require 'terminal-table'

require 'whats'

#SETUP
default_options={
  :puppetdb_host => 'puppetdb',
  :puppetdb_port => '8081',
  :domains       => ['.local'],
  :basic_info    => ["hostname","manufacturer","productname","serialnumber","operatingsystem","operatingsystemrelease","architecture","processor0","processorcount","memorysize","kernelrelease","ipaddress","macaddress","virtual","uptime"],
  :verbose       => false,
  :yaml          => false,
  :json          => false,
  :sort          => false,
  :all           => false,
  :config        => '',
  :quiet         => false,

}

options = default_options

OptionParser.new do |opts|
  opts.banner = "Usage: whats [options] <hostname>"

  opts.on("-j","--json","JSON output") do |j|
    options[:json] = j
  end
  opts.on("-y","--yaml","YAML output") do |y|
    options[:yaml] = true
  end
  opts.on("-p","--pp","Pretty Print output") do |p|
    options[:pp] = true
  end
  opts.on("-a","--all","Use all facts") do |a|
    options[:all] = true
  end
  opts.on("-c","--config CONFIG","Config file to use") do |c|
    options.merge!(Hash[YAML::load(open(c)).map { |k, v| [k.to_sym, v] }])
  options[:config] = c
  end
  opts.on("-v","--verbose", "Be verbose") do |v|
    options[:verbose] = v
  end
  opts.on("-q","--quiet", "Be extra quiet, only shown") do |q|
    options[:quiet] = q
  end
  opts.parse!
end.parse

if ARGV.length != 1
  puts "Please pass a hostname, see --help"
  exit
else
#see if we were given an ip instead, and if so, get hostname
  if !(IPAddr.new(ARGV[0]) rescue nil).nil?
    #got an ip, convert
    host = Resolv.new.getname ARGV[0]
        else
    host = ARGV[0].downcase
    end
end




#load config
if options[:config] == ""
  config=Whats.config_find()
  options[:config] = config
  options.merge!(Hash[YAML::load(open(File.expand_path(config))).map { |k, v| [k.to_sym, v] }])
  if options[:verbose]
    pp options
  end
else
  options.merge!(Hash[YAML::load(open(File.expand_path(options[:config]))).map { |k, v| [k.to_sym, v] }])
  if options[:verbose]
    pp options
  end
end
#try the name as given first, some hosts have short certnames(sigh)

if !options[:quiet]
  puts "Searching for #{host}..."
end
#detect if we got a short hostname or a fqdn.
if host.include?('.')
  fqdn=host
  if Whats.node_test(options[:puppetdb_host],options[:puppetdb_port],fqdn)
    facts=Whats.get_facts(options[:puppetdb_host],options[:puppetdb_port],fqdn)
  else
    raise ("Node #{fqdn} not found in puppetdb")
  end
else
  #we will need to itterate the available search domains...
  options[:domains].each do |dom|
    fqdn="#{host}.#{dom}"
    if !options[:quiet]
      puts "Searching for #{fqdn}"
    end
    if Whats.node_test(options[:puppetdb_host],options[:puppetdb_port],fqdn)
      facts=Whats.get_facts(options[:puppetdb_host],options[:puppetdb_port],fqdn)
      break
    else
      next
    end
  end
  if facts == nil
    raise ("node #{host} not found after serching all domains")
  end
end


node_facts=Whats.facts_to_hash(facts)

facts2 = Hash.new
if options[:all] == true
  facts2 = node_facts
else
  options[:basic_info].each do |val|
    facts2["#{val}"] = node_facts[val]
  end
end

Whats.output(options,facts2)
